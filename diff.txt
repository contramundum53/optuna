diff --git a/tests/importance_tests/test_fanova.py b/tests/importance_tests/test_fanova.py
index 798494b1c..762d26e26 100644
--- a/tests/importance_tests/test_fanova.py
+++ b/tests/importance_tests/test_fanova.py
@@ -6,6 +6,7 @@ from optuna import create_study
 from optuna import Trial
 from optuna.distributions import FloatDistribution
 from optuna.importance import FanovaImportanceEvaluator
+from optuna.importance import get_param_importances
 from optuna.samplers import RandomSampler
 from optuna.trial import create_trial
 
@@ -31,10 +32,10 @@ def test_fanova_importance_evaluator_n_trees() -> None:
     study.optimize(objective, n_trials=3)
 
     evaluator = FanovaImportanceEvaluator(n_trees=10, seed=0)
-    param_importance = evaluator.evaluate(study)
+    param_importance = get_param_importances(study, evaluator=evaluator)
 
     evaluator = FanovaImportanceEvaluator(n_trees=20, seed=0)
-    param_importance_different_n_trees = evaluator.evaluate(study)
+    param_importance_different_n_trees = get_param_importances(study, evaluator=evaluator)
 
     assert param_importance != param_importance_different_n_trees
 
@@ -46,10 +47,10 @@ def test_fanova_importance_evaluator_max_depth() -> None:
     study.optimize(objective, n_trials=3)
 
     evaluator = FanovaImportanceEvaluator(max_depth=1, seed=0)
-    param_importance = evaluator.evaluate(study)
+    param_importance = get_param_importances(study, evaluator=evaluator)
 
     evaluator = FanovaImportanceEvaluator(max_depth=2, seed=0)
-    param_importance_different_max_depth = evaluator.evaluate(study)
+    param_importance_different_max_depth = get_param_importances(study, evaluator=evaluator)
 
     assert param_importance != param_importance_different_max_depth
 
@@ -59,14 +60,14 @@ def test_fanova_importance_evaluator_seed() -> None:
     study.optimize(objective, n_trials=3)
 
     evaluator = FanovaImportanceEvaluator(seed=2)
-    param_importance = evaluator.evaluate(study)
+    param_importance = get_param_importances(study, evaluator=evaluator)
 
     evaluator = FanovaImportanceEvaluator(seed=2)
-    param_importance_same_seed = evaluator.evaluate(study)
+    param_importance_same_seed = get_param_importances(study, evaluator=evaluator)
     assert param_importance == param_importance_same_seed
 
     evaluator = FanovaImportanceEvaluator(seed=3)
-    param_importance_different_seed = evaluator.evaluate(study)
+    param_importance_different_seed = get_param_importances(study, evaluator=evaluator)
     assert param_importance != param_importance_different_seed
 
 
@@ -77,9 +78,10 @@ def test_fanova_importance_evaluator_with_target() -> None:
     study.optimize(objective, n_trials=3)
 
     evaluator = FanovaImportanceEvaluator(seed=0)
-    param_importance = evaluator.evaluate(study)
-    param_importance_with_target = evaluator.evaluate(
+    param_importance = get_param_importances(study, evaluator=evaluator)
+    param_importance_with_target = get_param_importances(
         study,
+        evaluator=evaluator,
         target=lambda t: t.params["x1"] + t.params["x2"],
     )
 
@@ -97,7 +99,7 @@ def test_fanova_importance_evaluator_with_infinite(inf_value: float) -> None:
     study.optimize(objective, n_trials=n_trial)
 
     evaluator = FanovaImportanceEvaluator(seed=seed)
-    param_importance_without_inf = evaluator.evaluate(study)
+    param_importance_without_inf = get_param_importances(study, evaluator=evaluator)
 
     # A trial with an inf value is added into the study manually.
     study.add_trial(
@@ -112,7 +114,7 @@ def test_fanova_importance_evaluator_with_infinite(inf_value: float) -> None:
         )
     )
     # Importance scores are calculated with a trial with an inf value.
-    param_importance_with_inf = evaluator.evaluate(study)
+    param_importance_with_inf = get_param_importances(study, evaluator=evaluator)
 
     # Obtained importance scores should be the same between with inf and without inf,
     # because the last trial whose objective value is an inf is ignored.
@@ -133,7 +135,9 @@ def test_multi_objective_fanova_importance_evaluator_with_infinite(
     study.optimize(multi_objective_function, n_trials=n_trial)
 
     evaluator = FanovaImportanceEvaluator(seed=seed)
-    param_importance_without_inf = evaluator.evaluate(study, target=lambda t: t.values[target_idx])
+    param_importance_without_inf = get_param_importances(
+        study, evaluator=evaluator, target=lambda t: t.values[target_idx]
+    )
 
     # A trial with an inf value is added into the study manually.
     study.add_trial(
@@ -148,7 +152,9 @@ def test_multi_objective_fanova_importance_evaluator_with_infinite(
         )
     )
     # Importance scores are calculated with a trial with an inf value.
-    param_importance_with_inf = evaluator.evaluate(study, target=lambda t: t.values[target_idx])
+    param_importance_with_inf = get_param_importances(
+        study, evaluator=evaluator, target=lambda t: t.values[target_idx]
+    )
 
     # Obtained importance scores should be the same between with inf and without inf,
     # because the last trial whose objective value is an inf is ignored.
diff --git a/tests/importance_tests/test_mean_decrease_impurity.py b/tests/importance_tests/test_mean_decrease_impurity.py
index dfc1e71b1..8c8a30421 100644
--- a/tests/importance_tests/test_mean_decrease_impurity.py
+++ b/tests/importance_tests/test_mean_decrease_impurity.py
@@ -5,6 +5,7 @@ import pytest
 from optuna import create_study
 from optuna import Trial
 from optuna.distributions import FloatDistribution
+from optuna.importance import get_param_importances
 from optuna.importance import MeanDecreaseImpurityImportanceEvaluator
 from optuna.samplers import RandomSampler
 from optuna.trial import create_trial
@@ -31,10 +32,10 @@ def test_mean_decrease_impurity_importance_evaluator_n_trees() -> None:
     study.optimize(objective, n_trials=3)
 
     evaluator = MeanDecreaseImpurityImportanceEvaluator(n_trees=10, seed=0)
-    param_importance = evaluator.evaluate(study)
+    param_importance = get_param_importances(study, evaluator=evaluator)
 
     evaluator = MeanDecreaseImpurityImportanceEvaluator(n_trees=20, seed=0)
-    param_importance_different_n_trees = evaluator.evaluate(study)
+    param_importance_different_n_trees = get_param_importances(study, evaluator=evaluator)
 
     assert param_importance != param_importance_different_n_trees
 
@@ -46,10 +47,10 @@ def test_mean_decrease_impurity_importance_evaluator_max_depth() -> None:
     study.optimize(objective, n_trials=3)
 
     evaluator = MeanDecreaseImpurityImportanceEvaluator(max_depth=1, seed=0)
-    param_importance = evaluator.evaluate(study)
+    param_importance = get_param_importances(study, evaluator=evaluator)
 
     evaluator = MeanDecreaseImpurityImportanceEvaluator(max_depth=2, seed=0)
-    param_importance_different_max_depth = evaluator.evaluate(study)
+    param_importance_different_max_depth = get_param_importances(study, evaluator=evaluator)
 
     assert param_importance != param_importance_different_max_depth
 
@@ -59,14 +60,14 @@ def test_mean_decrease_impurity_importance_evaluator_seed() -> None:
     study.optimize(objective, n_trials=3)
 
     evaluator = MeanDecreaseImpurityImportanceEvaluator(seed=2)
-    param_importance = evaluator.evaluate(study)
+    param_importance = get_param_importances(study, evaluator=evaluator)
 
     evaluator = MeanDecreaseImpurityImportanceEvaluator(seed=2)
-    param_importance_same_seed = evaluator.evaluate(study)
+    param_importance_same_seed = get_param_importances(study, evaluator=evaluator)
     assert param_importance == param_importance_same_seed
 
     evaluator = MeanDecreaseImpurityImportanceEvaluator(seed=3)
-    param_importance_different_seed = evaluator.evaluate(study)
+    param_importance_different_seed = get_param_importances(study, evaluator=evaluator)
     assert param_importance != param_importance_different_seed
 
 
@@ -77,9 +78,10 @@ def test_mean_decrease_impurity_importance_evaluator_with_target() -> None:
     study.optimize(objective, n_trials=3)
 
     evaluator = MeanDecreaseImpurityImportanceEvaluator(seed=0)
-    param_importance = evaluator.evaluate(study)
-    param_importance_with_target = evaluator.evaluate(
+    param_importance = get_param_importances(study, evaluator=evaluator)
+    param_importance_with_target = get_param_importances(
         study,
+        evaluator=evaluator,
         target=lambda t: t.params["x1"] + t.params["x2"],
     )
 
@@ -97,7 +99,7 @@ def test_mean_decrease_impurity_importance_evaluator_with_infinite(inf_value: fl
     study.optimize(objective, n_trials=n_trial)
 
     evaluator = MeanDecreaseImpurityImportanceEvaluator(seed=seed)
-    param_importance_without_inf = evaluator.evaluate(study)
+    param_importance_without_inf = get_param_importances(study, evaluator=evaluator)
 
     # A trial with an inf value is added into the study manually.
     study.add_trial(
@@ -112,7 +114,7 @@ def test_mean_decrease_impurity_importance_evaluator_with_infinite(inf_value: fl
         )
     )
     # Importance scores are calculated with a trial with an inf value.
-    param_importance_with_inf = evaluator.evaluate(study)
+    param_importance_with_inf = get_param_importances(study, evaluator=evaluator)
 
     # Obtained importance scores should be the same between with inf and without inf,
     # because the last trial whose objective value is an inf is ignored.
@@ -133,7 +135,9 @@ def test_multi_objective_mean_decrease_impurity_importance_evaluator_with_infini
     study.optimize(multi_objective_function, n_trials=n_trial)
 
     evaluator = MeanDecreaseImpurityImportanceEvaluator(seed=seed)
-    param_importance_without_inf = evaluator.evaluate(study, target=lambda t: t.values[target_idx])
+    param_importance_without_inf = get_param_importances(
+        study, evaluator=evaluator, target=lambda t: t.values[target_idx]
+    )
 
     # A trial with an inf value is added into the study manually.
     study.add_trial(
@@ -148,7 +152,9 @@ def test_multi_objective_mean_decrease_impurity_importance_evaluator_with_infini
         )
     )
     # Importance scores are calculated with a trial with an inf value.
-    param_importance_with_inf = evaluator.evaluate(study, target=lambda t: t.values[target_idx])
+    param_importance_with_inf = get_param_importances(
+        study, evaluator=evaluator, target=lambda t: t.values[target_idx]
+    )
 
     # Obtained importance scores should be the same between with inf and without inf,
     # because the last trial whose objective value is an inf is ignored.
